package ija.projekt.gui;

import ija.projekt.utils.BoardSquare;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 * Rozsiruje JPanel, predstavuje GUI hraci desky. Zajistuje zobrazovani a
 * ovladani hry samotne.
 *
 * @author Pavel Vesely, Ales Drevo
 */
public class Board extends javax.swing.JPanel {

    protected BufferedImage[] pictures = new BufferedImage[7];
    protected GameGui gui;
    protected boolean finished = false;
    private int xAdjustment;
    private int yAdjustment;
    private BoardSquare sourceBSquare;
    private JLabel figLabel = null;

    /**
     * Konstruktor. Inicializuje Board, sparuje jej s konkretnim GameGui, nacte
     * obrazky a vytvori strukturu hraciho pole (policka samotna).
     */
    public Board(GameGui gui) {
        initComponents();
        this.gui = gui;

        try {
            pictures[0] = ImageIO.read(new File("lib\\w_stone.png"));
            pictures[1] = ImageIO.read(new File("lib\\b_stone.png"));
            pictures[2] = ImageIO.read(new File("lib\\w_dame.png"));
            pictures[3] = ImageIO.read(new File("lib\\b_dame.png"));
            pictures[4] = ImageIO.read(new File("lib\\focus.png"));
            pictures[5] = ImageIO.read(new File("lib\\w_field.png"));
            pictures[6] = ImageIO.read(new File("lib\\b_field.png"));
        } catch (IOException ex) {
            try {
                pictures[0] = ImageIO.read(new File("lib/w_stone.png"));
                pictures[1] = ImageIO.read(new File("lib/b_stone.png"));
                pictures[2] = ImageIO.read(new File("lib/w_dame.png"));
                pictures[3] = ImageIO.read(new File("lib/b_dame.png"));
                pictures[4] = ImageIO.read(new File("lib/focus.png"));
                pictures[5] = ImageIO.read(new File("lib/w_field.png"));
                pictures[6] = ImageIO.read(new File("lib/b_field.png"));
            } catch (IOException ex2) {
                System.err.println("Nepodarilo se nacist obrazky.");
                System.exit(1);
            }
        }

        // Vytvoreni poli hraci desky
        Color dark = new Color(30, 30, 20);
        Color light = new Color(220, 220, 210);
        Color transparent = new Color(0, 0, 0, 0);

        board.setLayout(new GridLayout(8, 8));
        figurePan.setLayout(new GridLayout(8, 8));
        focusPan.setLayout(new GridLayout(8, 8));
        eCatcher.setLayout(new GridLayout(8, 8));
        JPanel square;
        BoardSquare bsquare;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                //Vytvoreni poli hraci desky (cerna a bila pole)
                square = new JPanel(new BorderLayout());
                board.add(square);
                square.setBackground(transparent);//
                if ((i % 2 == 0 && j % 2 == 0) || (i % 2 == 1 && j % 2 == 1)) {
                    square.add(new JLabel(new ImageIcon(pictures[5])));//square.setBackground(light);
                } else {
                    square.add(new JLabel(new ImageIcon(pictures[6])));//square.setBackground(dark);
                }            //Pole pro figury
                square = new JPanel(new BorderLayout());
                figurePan.add(square);
                square.setBackground(transparent);
                //Vytvoreni poli pro zvyraznini tahu a napovedu
                square = new JPanel(new BorderLayout());
                focusPan.add(square);
                square.setBackground(transparent);
                square.add(new JLabel(new ImageIcon(pictures[4])));
                square.setVisible(false);
                //Pole pro vyhodnocovani eventu
                bsquare = new BoardSquare((char) ('a' + j), (8 - i));
                eCatcher.add(bsquare);
                bsquare.setVisible(false);
            }
        }

        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardPane = new javax.swing.JLayeredPane();
        eCatcher = new javax.swing.JPanel();
        figurePan = new javax.swing.JPanel();
        focusPan = new javax.swing.JPanel();
        board = new javax.swing.JPanel();

        boardPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        eCatcher.setBackground(new Color(0,0,0,0));
        eCatcher.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        eCatcher.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                eCatcherMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                eCatcherMousePressed(evt);
            }
        });
        eCatcher.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                eCatcherMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout eCatcherLayout = new javax.swing.GroupLayout(eCatcher);
        eCatcher.setLayout(eCatcherLayout);
        eCatcherLayout.setHorizontalGroup(
            eCatcherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        eCatcherLayout.setVerticalGroup(
            eCatcherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        eCatcher.setBounds(0, 0, 600, 600);
        boardPane.add(eCatcher, javax.swing.JLayeredPane.DEFAULT_LAYER);

        figurePan.setBackground(new Color(0,0,0,0));
        figurePan.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout figurePanLayout = new javax.swing.GroupLayout(figurePan);
        figurePan.setLayout(figurePanLayout);
        figurePanLayout.setHorizontalGroup(
            figurePanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        figurePanLayout.setVerticalGroup(
            figurePanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        figurePan.setBounds(0, 0, 600, 600);
        boardPane.add(figurePan, javax.swing.JLayeredPane.DEFAULT_LAYER);

        focusPan.setBackground(new Color(0,0,0,0));
        focusPan.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout focusPanLayout = new javax.swing.GroupLayout(focusPan);
        focusPan.setLayout(focusPanLayout);
        focusPanLayout.setHorizontalGroup(
            focusPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        focusPanLayout.setVerticalGroup(
            focusPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        focusPan.setBounds(0, 0, 600, 600);
        boardPane.add(focusPan, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        board.setBounds(0, 0, 600, 600);
        boardPane.add(board, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(boardPane, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 622, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(boardPane, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Spousti se pri uvolneni tlacitka mysi. Pokud byl tazen obraz figury,
     * vyhodnoti tah a bud jej potvrdi a ukonci tah hrace nebo zamitne a vrati
     * obraz figury na puvodni pozici.
     */
    private void eCatcherMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eCatcherMouseReleased
        removeFocus();
        if (figLabel == null) {
            return;
        }
        figLabel.setVisible(false);
        boardPane.remove(figLabel);
        BoardSquare bsquare = (BoardSquare) eCatcher.getComponentAt(evt.getPoint());
        if (bsquare == null || !gui.move(sourceBSquare.getColumn(), sourceBSquare.getRow(), bsquare.getColumn(), bsquare.getRow())) {
            ((JPanel) figurePan.getComponent(sourceBSquare.getIndex())).add(figLabel);
            figLabel.setVisible(true);
        }
        figLabel = null;
    }//GEN-LAST:event_eCatcherMouseReleased

    /**
     * Spusti se pri zmacknuti tlacitka. Pokud je pod mysi obraz figury, zjisti,
     * zda se muze pohnout (pokud ano, upravi ho pro tahnuti, nastavi ho do
     * figLabel) a zobrazi kontextovou napovedu.
     */
    private void eCatcherMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eCatcherMousePressed
        if (figLabel != null || finished) {
            return;
        }
        BoardSquare bsquare = (BoardSquare) eCatcher.getComponentAt(evt.getPoint());

        JPanel fsquare = (JPanel) figurePan.getComponent(bsquare.getIndex());
        sourceBSquare = bsquare;
        Point defLocation = fsquare.getLocation();
        xAdjustment = (int) defLocation.getX() - evt.getX();
        yAdjustment = (int) defLocation.getY() - evt.getY();
        if (fsquare.getComponentCount() == 0) {
            return;
        }
        figLabel = (JLabel) fsquare.getComponent(0);

        setFocus(gui.getFocus(bsquare.getColumn(), bsquare.getRow()));
        if (!gui.canMove(bsquare.getColumn(), bsquare.getRow())) {
            figLabel = null;
            return;
        }
        fsquare.remove(figLabel);
        boardPane.add(figLabel, 0);
        figLabel.setLocation(evt.getX() + xAdjustment, evt.getY() + yAdjustment);
        figLabel.setSize(figLabel.getWidth(), figLabel.getHeight());
    }//GEN-LAST:event_eCatcherMousePressed

    /**
     * Spousti se pri tazeni mysi. Pokud je figLabel neprazdne, tahne drzenou
     * figurou.
     */
    private void eCatcherMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eCatcherMouseDragged
        if (figLabel == null) {
            return;
        }
        figLabel.setLocation(evt.getX() + xAdjustment, evt.getY() + yAdjustment);
    }//GEN-LAST:event_eCatcherMouseDragged
    /**
     * Vlozi obraz figury s obrazkem specifiovanym pic na pozici index.
     */
    public void putFig(int index, int pic) {
        JPanel panel = (JPanel) figurePan.getComponent(index);
        if (panel == null || pic < 0 || pic > 3) {
            return;
        }
        panel.removeAll();
        panel.add(new JLabel(new ImageIcon(pictures[pic])));
        panel.revalidate();
    }

    /**
     * Odstrani obraz figury z pole index.
     */
    public void removeFig(int index) {
        JPanel panel = (JPanel) figurePan.getComponent(index);
        panel.removeAll();
        panel.revalidate();
    }

    /**
     * Presune obraz figury z pozice inx0 na pozici inx1.
     */
    public void moveFig(int inx0, int inx1) {
        JPanel panel0, panel1;
        panel0 = (JPanel) figurePan.getComponent(inx0);
        panel1 = (JPanel) figurePan.getComponent(inx1);
        Component c = panel0.getComponent(0);
        panel0.removeAll();
        panel1.removeAll();
        panel1.add(c);
        panel0.revalidate();
        panel1.revalidate();
    }

    /**
     * Smaze vsechny obrazy figur na hraci desce.
     */
    public void removeAllFigs() {
        for (int i = 0; i < 64; i++) {
            ((JPanel) figurePan.getComponent(i)).removeAll();
        }
    }

    /**
     * Zrusi veskerou kontextovou napovedu.
     */
    public void removeFocus() {
        for (int i = 0; i < 64; i++) {
            focusPan.getComponent(i).setVisible(false);
        }
        focusPan.revalidate();
        repaint();
    }

    /**
     * Nastavi kontextovou napovedu na pole v inxArr.
     */
    public void setFocus(int[] inxArr) {
        removeFocus();
        for (int i : inxArr) {
            focusPan.getComponent(i).setVisible(true);
        }
        focusPan.revalidate();
        repaint();
    }

    /**
     * Setter pro boolean finished. Pokud je true, neprijima board zadne nove
     * tahy.
     */
    public void setFinished(boolean fin) {
        this.finished = fin;
    }

    /**
     * Getter pro boolean finished.
     */
    public boolean getFinished() {
        return finished;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel board;
    private javax.swing.JLayeredPane boardPane;
    private javax.swing.JPanel eCatcher;
    private javax.swing.JPanel figurePan;
    private javax.swing.JPanel focusPan;
    // End of variables declaration//GEN-END:variables
}