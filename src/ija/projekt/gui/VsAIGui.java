/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ija.projekt.gui;

import ija.projekt.utils.Turn;
import ija.projekt.utils.SavedGame;
import ija.projekt.basis.Desk;
import java.awt.*;
import javax.swing.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Random;
import javax.xml.bind.JAXBException;

/**
 * Implementace GameGui. Vytvari GUI pro hru proti pocitaci.
 *
 * @author Pavel Vesely, Ales Drevo
 */
public class VsAIGui extends GameGui {

    protected boolean player = true;

    /**
     * Konstruktor. Inicializuje VsAIGui, resi nacitani hry ze souboru, volbu
     * strany hracem a zvoli-li hrac cernou, provede prvni tah AI.
     */
    public VsAIGui(File file) {
        super(file);
        this.desk = new Desk(this);
        initComponents();
        playedTurns = new ArrayList<>();
        recordPanel.setLayout(new BoxLayout(recordPanel, BoxLayout.Y_AXIS));
        this.board = new Board(this);
        board.setLayout(new GridLayout());
        boardPanel.setLayout(new GridLayout());
        boardPanel.add(board);
        board.setVisible(true);

        if (file != null) {
            SavedGame game = null;
            try {
                game = saveNLoad.load(file);
            } catch (JAXBException ex) {
                JOptionPane.showMessageDialog(this,
                        "Chyba načtení souboru",
                        "",
                        JOptionPane.ERROR_MESSAGE);
                dispose();
            }
            loadGame(game);
        }
        refreshBoard();

        setLocation(200, 10);
        setVisible(true);

        Object[] options = {"Bílá", "Černá"};
        int n = JOptionPane.showOptionDialog(this,
                "Zvolte si barvu:",
                "",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                null); //default button title
        if (n == 1) {
            player = false;
        }
        if (player != hasTurn) {
            aiTurn();
            endTurn();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardPanel = new javax.swing.JPanel();
        recordPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dame Hotseat");

        boardPanel.setMinimumSize(new java.awt.Dimension(600, 600));
        boardPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout recordPanelLayout = new javax.swing.GroupLayout(recordPanel);
        recordPanel.setLayout(recordPanelLayout);
        recordPanelLayout.setHorizontalGroup(
            recordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        recordPanelLayout.setVerticalGroup(
            recordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );

        saveButton.setText("Uložit");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(recordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(boardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(recordPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Spousti se klikem na tlacitko Ulozit. Resi vybrani souboru a ulozeni hry.
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        File file = null;
        if (fc.showDialog(VsAIGui.this, "Uložit") == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
        } else {
            return;
        }

        //SavedGame game = new SavedGame(true, null, null);//
        SavedGame game = prepSavedGame();
        try {
            saveNLoad.save(game, file);
        } catch (JAXBException ex) {
            JOptionPane.showMessageDialog(this,
                    "Chyba uložení souboru",
                    "",
                    JOptionPane.ERROR_MESSAGE);
            dispose();
        }

    }//GEN-LAST:event_saveButtonActionPerformed
    /**
     * Provede tah AI. Umela inteligence je trivialni, vybere nahodny tah z
     * moznych.
     */
    public void aiTurn() {
        if (hasTurn == player) {
            return;
        }
        Turn[] turns = getPossTurns(hasTurn);
        Turn aiTurn = turns[new Random().nextInt(turns.length)];
        execTurn(aiTurn, true);
        addRecord(aiTurn);
        playedTurns.add(aiTurn);
    }

    /**
     * Implementace madeTurn. Pouze metodu GameGui.endTurn, provede tah AI a
     * znovu zavola endTurn.
     */
    @Override
    public void madeTurn() {
        endTurn();
        aiTurn();
        endTurn();
    }

    /**
     * Implementace addRecord. Prida zapis tahu do zaznamu hry.
     */
    @Override
    public void addRecord(Turn turn) {
        JLabel label;
        if (hasTurn) {
            label = new JLabel();
            label.setText(turnCnt + ".");
            recordPanel.add(label);
            label.setVisible(true);
        } else {
            turnCnt++;
            label = (JLabel) recordPanel.getComponent(recordPanel.getComponentCount() - 1);
        }
        String text;
        if (turn.getTake()) {
            text = label.getText() + " " + turn.getP0().getColumn() + "" + turn.getP0().getRow() + "x" + turn.getP1().getColumn() + "" + turn.getP1().getRow();
        } else {
            text = label.getText() + " " + turn.getP0().getColumn() + "" + turn.getP0().getRow() + "-" + turn.getP1().getColumn() + "" + turn.getP1().getRow();
        }
        label.setText(text);
    }

    /**
     * Implementace metody loadRecords. Nacte zaznam hry.
     */
    @Override
    public void loadRecords(Turn[] turns) {
        recordPanel.removeAll();
        hasTurn = true;
        for (Turn turn : turns) {
            addRecord(turn);
            hasTurn = !hasTurn;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JPanel recordPanel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
